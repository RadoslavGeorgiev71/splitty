# OpenApi for application Splitty

openapi: "3.0.3"

info:
  title: "Splitty OpenAPI specification"
  description: "This OpenAPI specification provides structure, fucntionalities and interactions to the API of the application Splitty"
  version: "1.1"
  
servers:
  - url: "https://localhost:3000"

tags:
  - name: admin
    description: "Someone with managing preveliges in the application an access to the database"
  - name: client
    description: "A client using the application"
  - name: event
    description: "An event that has participants and expenses"
  - name: participant
    description: "Takes part in an event, has debts for expenses"
    # Maybe separate tag not needed as participants are technically clients
  - name: debt
    description: "A sum of money one participant of an event ows to another participant of the event"
  - name: tag
    # To avoid confusion: just a tag for the object tag
    description: "General or custom tag for events, has a type and a colour assigned to it"
    
# Only status codes 200, 401 and 404 are described for responses for now
paths:
  # This is just the token endpoint from the second Web assignment(Not really sure if it should be that way)
  /token:
    get:
      tags:
        - client
      summary: "Gets a JSON Web Token for the user"
      operationId: loginClient
      parameters:
        - name: username
          in: query
          required: false
          # Not sure if it should be false
          schema: 
            type: string
        - name: password
          in: query
          required: false
          # Again not sure if it should be false
          schema:
            type: string
      responses:
        "200":
          description: "Successful token acquired"
          content:
            application/jwt:
              schema:
                type: string
        "400":
          description: "Missing username or password parameters"
        "401":
          description: "Incorrect username or password"
  #/admin/...
  # Need concrete fields for admin to properly define the endpoint
  /client/{id}:
    get:
      tags:
        - client
      summary: "Retrieves a client by his id"
      operationId: getClientById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully retrieved the client"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "404":
          description: "Client not found by the given id"
    # Not sure whether post or put method is better
    post:
      tags:
        - client
      summary: "Changes information about a client, e.g. their name"
      operationId: updateClientById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully updated the client information"
        "401":
          description: "Tried to update another client"
    delete:
      tags:
        - client
      summary: "Deletes a client's account"
      operationId: deleteClientById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200": 
          description: "Successfully deleted the client"
        "401":
          description: "Unauthorized attempt at deleting client"
  /event/{inviteCode}:
  # Assumed inviteCode of event can be used as identifier
    get:
      tags:
        - event
      summary: "Retrieves an event by its inviteCode"
      operationId: getEventByInviteCode
      parameters:
        - name: inviteCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully retrieved the event"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "404":
          description: "Event not found by the given inviteCode"
    post:
      tags:
        - event
      summary: "Changes information about event, e.g. the name of the event"
      operationId: updateEventByInviteCode
      parameters:
        - name: inviteCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully updated the event information"
        "401":
          description: "Tried to update event without access"
    delete:
      tags:
        - event
      summary: "Deletes an event by its inviteCode"
      operationId: deleteEventByInviteCode
      parameters:
        - name: inviteCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully deleted the event"
        "401":
          description: "Unauthorized attempt at deleting the event"
  /debt/{id}:
    get:
      tags:
        - debt
      summary: "Retrieves a debt by its id"
      operationId: getDebtById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully retrieved the debt"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Debt"
        "404":
          description: "Debt not found by the given id"
    post:
      tags:
        - debt
      summary: "Updates information about a debt, e.g. whether it's paid or not"
      operationId: updateDebtById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully updated the debt information"
        "401": 
          description: "Unauthorized attempt at updating the event"
    delete:
      tags:
        - debt
      summary: "Deletes an event by provided id"
      operationId: deleteDebtById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses: 
        "200":
          description: "Successfully deleted the event"
        "401":
          description: "Unauthorized attempt at deleting the event"
  /tag/{type}:
  # Assumed the type uniquely identifies the tag(otherwise UML diagram update is needed)
    get:
      tags:
        - tag
      summary: "Retrieves a tag by its type"
      operationId: getTagByType
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully retrieved the tag by its type"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404":
          description: "Tag not found by the given type"
    post:
      tags:
        - tag
      summary: "Updates the tag information, e.g. its color"
      operationId: changeTagByType
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Tag information updated successfully"
        "401":
          description: "Unauthorized attempt at updating tag information"
    delete:
      tags:
        - tag
      summary: "Deletes a tag by the provided type"
      operationId: deleteTagById
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Tag deleted successfully"
        "401":
          description: "Unauthorized attempt at deleting the tag"
  
  # For now are omitted examples of properties(Can be add easily if decided)
components:
  schemas:
    Admin:
      type: object
      #properties:
      # Need to decide upon them(Need to update UML)
    Client:
    # Assumed client is the same object as participant
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      # Maybe clients should also have passwords, emails and saved iban, bic, language and currency preferrences(Need to update UML class diagram)
    Event:
      type: object
      properties:
        title:
          type: string
        inviteCode:
          type: string
        creator:
          type: object
        participants:
          type: array
          items:
            type: object
        expenses:
          type: array
          items:
            type: object
        dateTime: 
          type: object
        total:
          type: number
        tags:
          type: array
          items:
            type: object
    Debt:
      type: object
      properties:
        id:
          type: string
        from:
          type: object
        to:
          type: object
        amount:
          type: number
        paid:
          type: boolean
        paidDateTime:
          type: object
    Tag:
      type: object
      properties: 
        type:
        # Not to be confused, "type" is the actual name of the object
          type: string
        color:
          type: string

  
